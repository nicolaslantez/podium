// Code generated by MockGen. DO NOT EDIT.
// Source: database/database.go

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// GetLeaderboardExpiration mocks base method.
func (m *MockDatabase) GetLeaderboardExpiration(ctx context.Context, leaderboard string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderboardExpiration", ctx, leaderboard)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaderboardExpiration indicates an expected call of GetLeaderboardExpiration.
func (mr *MockDatabaseMockRecorder) GetLeaderboardExpiration(ctx, leaderboard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderboardExpiration", reflect.TypeOf((*MockDatabase)(nil).GetLeaderboardExpiration), ctx, leaderboard)
}

// GetMemberIDsWithScoreInsideRange mocks base method.
func (m *MockDatabase) GetMemberIDsWithScoreInsideRange(ctx context.Context, leaderboard, min, max string, offset, count int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberIDsWithScoreInsideRange", ctx, leaderboard, min, max, offset, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberIDsWithScoreInsideRange indicates an expected call of GetMemberIDsWithScoreInsideRange.
func (mr *MockDatabaseMockRecorder) GetMemberIDsWithScoreInsideRange(ctx, leaderboard, min, max, offset, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberIDsWithScoreInsideRange", reflect.TypeOf((*MockDatabase)(nil).GetMemberIDsWithScoreInsideRange), ctx, leaderboard, min, max, offset, count)
}

// GetMembers mocks base method.
func (m *MockDatabase) GetMembers(ctx context.Context, leaderboard, order string, includeTTL bool, members ...string) ([]*Member, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, leaderboard, order, includeTTL}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMembers", varargs...)
	ret0, _ := ret[0].([]*Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockDatabaseMockRecorder) GetMembers(ctx, leaderboard, order, includeTTL interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, leaderboard, order, includeTTL}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockDatabase)(nil).GetMembers), varargs...)
}

// GetOrderedMembers mocks base method.
func (m *MockDatabase) GetOrderedMembers(ctx context.Context, leaderboard string, start, stop int, order string) ([]*Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderedMembers", ctx, leaderboard, start, stop, order)
	ret0, _ := ret[0].([]*Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderedMembers indicates an expected call of GetOrderedMembers.
func (mr *MockDatabaseMockRecorder) GetOrderedMembers(ctx, leaderboard, start, stop, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderedMembers", reflect.TypeOf((*MockDatabase)(nil).GetOrderedMembers), ctx, leaderboard, start, stop, order)
}

// GetRank mocks base method.
func (m *MockDatabase) GetRank(ctx context.Context, leaderboard, member, order string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRank", ctx, leaderboard, member, order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRank indicates an expected call of GetRank.
func (mr *MockDatabaseMockRecorder) GetRank(ctx, leaderboard, member, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRank", reflect.TypeOf((*MockDatabase)(nil).GetRank), ctx, leaderboard, member, order)
}

// GetTotalMembers mocks base method.
func (m *MockDatabase) GetTotalMembers(ctx context.Context, leaderboard string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalMembers", ctx, leaderboard)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalMembers indicates an expected call of GetTotalMembers.
func (mr *MockDatabaseMockRecorder) GetTotalMembers(ctx, leaderboard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalMembers", reflect.TypeOf((*MockDatabase)(nil).GetTotalMembers), ctx, leaderboard)
}

// Healthcheck mocks base method.
func (m *MockDatabase) Healthcheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthcheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Healthcheck indicates an expected call of Healthcheck.
func (mr *MockDatabaseMockRecorder) Healthcheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*MockDatabase)(nil).Healthcheck), ctx)
}

// IncrementMemberScore mocks base method.
func (m *MockDatabase) IncrementMemberScore(ctx context.Context, leaderboard, member string, increment float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementMemberScore", ctx, leaderboard, member, increment)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementMemberScore indicates an expected call of IncrementMemberScore.
func (mr *MockDatabaseMockRecorder) IncrementMemberScore(ctx, leaderboard, member, increment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementMemberScore", reflect.TypeOf((*MockDatabase)(nil).IncrementMemberScore), ctx, leaderboard, member, increment)
}

// RemoveLeaderboard mocks base method.
func (m *MockDatabase) RemoveLeaderboard(ctx context.Context, leaderboard string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLeaderboard", ctx, leaderboard)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLeaderboard indicates an expected call of RemoveLeaderboard.
func (mr *MockDatabaseMockRecorder) RemoveLeaderboard(ctx, leaderboard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLeaderboard", reflect.TypeOf((*MockDatabase)(nil).RemoveLeaderboard), ctx, leaderboard)
}

// RemoveMembers mocks base method.
func (m *MockDatabase) RemoveMembers(ctx context.Context, leaderboard string, members ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, leaderboard}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveMembers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMembers indicates an expected call of RemoveMembers.
func (mr *MockDatabaseMockRecorder) RemoveMembers(ctx, leaderboard interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, leaderboard}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMembers", reflect.TypeOf((*MockDatabase)(nil).RemoveMembers), varargs...)
}

// SetLeaderboardExpiration mocks base method.
func (m *MockDatabase) SetLeaderboardExpiration(ctx context.Context, leaderboard string, expireAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLeaderboardExpiration", ctx, leaderboard, expireAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLeaderboardExpiration indicates an expected call of SetLeaderboardExpiration.
func (mr *MockDatabaseMockRecorder) SetLeaderboardExpiration(ctx, leaderboard, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLeaderboardExpiration", reflect.TypeOf((*MockDatabase)(nil).SetLeaderboardExpiration), ctx, leaderboard, expireAt)
}

// SetMembers mocks base method.
func (m *MockDatabase) SetMembers(ctx context.Context, leaderboard string, databaseMembers []*Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMembers", ctx, leaderboard, databaseMembers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMembers indicates an expected call of SetMembers.
func (mr *MockDatabaseMockRecorder) SetMembers(ctx, leaderboard, databaseMembers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMembers", reflect.TypeOf((*MockDatabase)(nil).SetMembers), ctx, leaderboard, databaseMembers)
}

// SetMembersTTL mocks base method.
func (m *MockDatabase) SetMembersTTL(ctx context.Context, leaderboard string, databaseMembers []*Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMembersTTL", ctx, leaderboard, databaseMembers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMembersTTL indicates an expected call of SetMembersTTL.
func (mr *MockDatabaseMockRecorder) SetMembersTTL(ctx, leaderboard, databaseMembers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMembersTTL", reflect.TypeOf((*MockDatabase)(nil).SetMembersTTL), ctx, leaderboard, databaseMembers)
}
